---
import BaseLayout from '../../layouts/BaseLayout.astro'
import Header from '../../components/Header.astro'
import CardsGrid from '../../components/CardsGrid.astro'
import Card from '../../components/Card.astro'
import { mechList, MechObject } from '../../data/mechs'

export async function getStaticPaths() {
	return mechList.map((mech) => {
		return {
			params: { chassis: mech.chassis },
			props: {
				short: mech.short,
				weightclass: mech.weightclass,
				weight: mech.weight,
				DLC: mech.DLC,
			},
		}
	})
}

const { chassis } = Astro.params
const { short, weightclass, weight, DLC } = Astro.props

const MDAfiles = await Astro.glob('./../../data/MDA/**/*MDA.json')
const selectedMDA = MDAfiles.filter(
	(mda) =>
		mda.chassisFullName.replaceAll(' ', '').toLowerCase() ===
		chassis.replaceAll(' ', '').toLowerCase()
)
const MechObjects = selectedMDA.map((mda) => {
	return new MechObject(mda)
})

function linkFormatSarna(str: string): string {
	let newString = str.replace(/-+/g, '-! ')
	newString = newString.replace(/\s+/g, '_')
	let words = newString.split('_')
	for (let i = 0; i < words.length; i++) {
		words[i] =
			words[i].charAt(0).toUpperCase() + words[i].slice(1).toLowerCase()
	}
	newString = words.join('_')
	return newString.includes('-!_') ? newString.replace('!_', '') : newString
}
---

<BaseLayout title="MW5 mech list">
	<Header title={chassis} />
	<div class="info">
		<div
			class="mechImage"
			id={chassis.replace(/\s/g, '')}
			style={`background-image: url(/MW5-mechlab/mechs/${chassis.replaceAll(
				/\s+/g,
				''
			)}.png)`}
		>
			{
				DLC && (
					<div
						class="dlcIcon"
						style={`background-image: url(/MW5-mechlab/ico/${DLC}-icon.png);`}
					/>
				)
			}
		</div>
		<div class="spec">
			<p>Class: {weightclass[0].toUpperCase() + weightclass.slice(1)}</p>
			<p>Weight: {weight} tons</p>
			{DLC && <p>DLC: {DLC}</p>}
			<p>
				{
					MechObjects[1]
						? MechObjects[1].mda.description.replaceAll('[*]', '')
						: MechObjects[0].mda.description.replaceAll('[*]', '')
				}
			</p>
			<a href={`https://www.sarna.net/wiki/${linkFormatSarna(chassis)}`}
				>Sarna wiki link</a
			>
		</div>
	</div>
	<CardsGrid>
		{
			MechObjects.map((e) => (
				<Card>
					<div class="hr-after">
						<h2 class="text-2xl">Variant: {e.name}</h2>
						{e.DLC !== '' && (
							<h3 style="float: right; background-color: rgba(255, 255, 128, .3);">
								{e.DLC}
							</h3>
						)}
						{e.mda.bIsHeroMech && <p class="text-xl">Hero!</p>}

						<p>
							Speed:
							{Math.floor(
								(e.mda.engineRating / e.mda.mechDataStats.baseStats.tons) * 16.2
							)}
							kp/h
						</p>
						<p>
							{e.mda.bXLEngine ? <>XL</> : <>Standard</>} engine
							{e.mda.engineRating}
						</p>
						{e.mda.equipmentAllocation.allowedJumpJetType.tagName ===
						'None' ? null : (
							<p>Has jump jets</p>
						)}
						{e.mda.mechDataStats.mechImportData.baseMechInformation
							.armorType === 'ferrofibrousarmortype' ||
						e.mda.mechDataStats.mechImportData.baseMechInformation
							.structureType === 'endosteeltype' ? (
							<p>
								Weight Saving:
								{e.mda.mechDataStats.mechImportData.baseMechInformation
									.armorType === 'ferrofibrousarmortype' &&
									'Ferro-fibrous armor, '}
								{e.mda.mechDataStats.mechImportData.baseMechInformation
									.structureType === 'endosteeltype' && ' Endo-steel structure'}
							</p>
						) : (
							e.mda.mechDataStats.mechImportData.baseMechInformation
								.bXLEngine === true && (
								<p>
									{e.mda.mechDataStats.mechImportData.baseMechInformation
										.bXLEngine === true && 'Weight Saving: XL engine'}
								</p>
							)
						)}
						<p>
							Free tonnage (no armor):
							{e.mda.mechDataStats.baseStats.tons -
								e.mda.mechDataStats.baseStats.baseTons}
							tons
						</p>
						{e.mda.equipmentAllocation.slotData.map((e) => {
							return (
								<>
									{e.slotTypeDataAssetId.id ===
										'MWSlotTypeDataAsset:EngineHeatsink_SlotType' && (
										<p>
											Engine hs:
											{e.slotCounts.CenterTorso}
										</p>
									)}
									{e.slotTypeDataAssetId.id ===
										'MWSlotTypeDataAsset:BAP_SlotType' && (
										<p>Beagle probe slot </p>
									)}
									{e.slotTypeDataAssetId.id ===
										'MWSlotTypeDataAsset:ECM_SlotType' && <p>ECM slot </p>}
								</>
							)
						})}
						{e.mda.selectedWeaponHardPoints.filter((i) =>
							i.includes('antimissilesystem')
						).length !== 0 && (
							<p>
								AMS:
								{
									e.mda.selectedWeaponHardPoints.filter((i) =>
										i.includes('antimissilesystem')
									).length
								}
							</p>
						)}
						<>
							Weapons:{' '}
							{e.installedWeaponsMda.head.length > 0 && (
								<>
									<br />
									Head: {e.installedWeaponsMda.head.join(', ')}
								</>
							)}
							{e.installedWeaponsMda.rt.length > 0 && (
								<>
									<br />
									RT: {e.installedWeaponsMda.rt.join(', ')}
								</>
							)}
							{e.installedWeaponsMda.lt.length > 0 && (
								<>
									<br />
									LT: {e.installedWeaponsMda.lt.join(', ')}
								</>
							)}
							{e.installedWeaponsMda.ra.length > 0 && (
								<>
									<br />
									RA: {e.installedWeaponsMda.ra.join(', ')}
								</>
							)}
							{e.installedWeaponsMda.la.length > 0 && (
								<>
									<br />
									LA: {e.installedWeaponsMda.la.join(', ')}
								</>
							)}
						</>
						<p>Trait slots: {e.mda.equipmentAllocation.totalTraitSlots}</p>
						{e.mda.bIsHeroMech && (
							<p>{e.mda.description.replaceAll('[*]', '')}</p>
						)}
					</div>
				</Card>
			))
		}
	</CardsGrid>
</BaseLayout>
<style>
	.info {
		padding: 10px;
		display: flex;
		flex-flow: row wrap;
		justify-content: center;
		gap: 25px;
	}
	@media (max-width: 671px) {
		.info p {
			font-size: 16px;
		}
	}
	.mechImage {
		min-width: 300px;
		min-height: 500px;
		background: transparent no-repeat;
		background-size: contain;
		border-radius: 5px;
	}
	.dlcIcon {
		margin: 5px;
		width: 30px;
		height: 30px;
		background-size: contain;
		background-repeat: no-repeat;
	}
	.spec {
		flex: 1 1 350px;
		min-width: 150px;
		padding: 10px;
		display: flex;
		flex-flow: column nowrap;
		justify-content: space-around;
		background-color: rgba(36, 36, 36, 0.5);
		box-shadow: 0px 0px 7px 8px rgb(104 104 104 / 95%);
		border-radius: 15px;
		font-size: 1.2rem;
		color: white;
	}
	.spec a {
		font-size: 1.3rem;
		text-decoration: underline solid;
	}
	.spec a:hover {
		text-shadow: 0 0 2px black, 0 0 5px blue;
	}
	.hr-after p {
		position: relative;
		margin-bottom: 10px;
		font-size: 1.1rem;
	}
	.hr-after p::after {
		content: '';
		position: absolute;
		bottom: 0;
		left: 0;
		width: 100%;
		height: 1px;
		background-color: aliceblue;
	}
</style>
